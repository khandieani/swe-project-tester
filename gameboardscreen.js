import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";

function GameBoard() {
Â Â const navigate = useNavigate();
Â Â const location = useLocation();

Â Â // Retrieve or initialize board state and player turn
Â Â const [board, setBoard] = useState(location.state?.board || Array(9).fill(null));
Â Â const [isXTurn, setIsXTurn] = useState(location.state?.isXTurn ?? true);
Â Â const [winner, setWinner] = useState(null);
Â Â const [hasPlayed, setHasPlayed] = useState(false);

Â Â // Handle cell clicks
Â Â const handleClick = (index) => {
Â Â Â Â if (board[index] || winner || hasPlayed) return;

Â Â Â Â const newBoard = [...board];
Â Â Â Â newBoard[index] = isXTurn ? "X" : "O";
Â Â Â Â setBoard(newBoard);
Â Â Â Â setIsXTurn(!isXTurn);
Â Â Â Â setHasPlayed(true);
Â Â };

Â Â // Check for a winner
Â Â const checkWinner = (board) => {
Â Â Â Â const winningCombinations = [
Â Â Â Â Â Â [0, 1, 2],
Â Â Â Â Â Â [3, 4, 5],
Â Â Â Â Â Â [6, 7, 8],
Â Â Â Â Â Â [0, 3, 6],
Â Â Â Â Â Â [1, 4, 7],
Â Â Â Â Â Â [2, 5, 8],
Â Â Â Â Â Â [0, 4, 8],
Â Â Â Â Â Â [2, 4, 6],
Â Â Â Â ];
Â Â Â Â for (const [a, b, c] of winningCombinations) {
Â Â Â Â Â Â if (board[a] && board[a] === board[b] && board[a] === board[c]) {
Â Â Â Â Â Â Â Â return board[a];
Â Â Â Â Â Â }
Â Â Â Â }
Â Â Â Â return null;
Â Â };

Â Â // Check for a winner whenever the board updates
Â Â useEffect(() => {
Â Â Â Â const gameWinner = checkWinner(board);
Â Â Â Â if (gameWinner) setWinner(gameWinner);
Â Â }, [board]);

Â Â // Pass board state and turn to the trivia screen
Â Â const handleNextPlayer = () => {
Â Â Â Â navigate("/trivia", { state: { board, isXTurn } });
Â Â };

Â Â return (
Â Â Â Â <div style={styles.container}>
Â Â Â Â Â Â <h1 style={styles.title}>Tic Tac Toe</h1>
Â Â Â Â Â Â {winner ? (
Â Â Â Â Â Â Â Â <h2 style={styles.winnerText}>ðŸŽ‰ {winner} Wins! ðŸŽ‰</h2>
Â Â Â Â Â Â ) : (
Â Â Â Â Â Â Â Â <h2 style={styles.turnText}>
Â Â Â Â Â Â Â Â Â Â {isXTurn ? "Player X's Turn" : "Player O's Turn"}
Â Â Â Â Â Â Â Â </h2>
Â Â Â Â Â Â )}

Â Â Â Â Â Â <div style={styles.grid}>
Â Â Â Â Â Â Â Â {board.map((cell, index) => (
Â Â Â Â Â Â Â Â Â Â <div key={index} style={styles.cell} onClick={() => handleClick(index)}>
Â Â Â Â Â Â Â Â Â Â Â Â {cell}
Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â ))}
Â Â Â Â Â Â </div>

Â Â Â Â Â Â <button style={styles.button} onClick={handleNextPlayer}>
Â Â Â Â Â Â Â Â Next Player
Â Â Â Â Â Â </button>
Â Â Â Â </div>
Â Â );
}

const styles = {
Â Â container: {
Â Â Â Â height: "100vh",
Â Â Â Â display: "flex",
Â Â Â Â flexDirection: "column",
Â Â Â Â justifyContent: "center",
Â Â Â Â alignItems: "center",
Â Â Â Â fontFamily: "'Poppins', sans-serif",
Â Â Â Â background: "linear-gradient(135deg, #f0f4f8, #d9e2ec)",
Â Â },
Â Â title: {
Â Â Â Â fontSize: "2.5rem",
Â Â Â Â fontWeight: "600",
Â Â Â Â marginBottom: "20px",
Â Â Â Â color: "#102a43",
Â Â },
Â Â winnerText: {
Â Â Â Â fontSize: "1.8rem",
Â Â Â Â color: "#2d6a4f",
Â Â Â Â marginBottom: "20px",
Â Â },
Â Â turnText: {
Â Â Â Â fontSize: "1.5rem",
Â Â Â Â color: "#334e68",
Â Â Â Â marginBottom: "20px",
Â Â },
Â Â grid: {
Â Â Â Â display: "grid",
Â Â Â Â gridTemplateColumns: "repeat(3, 100px)", // 3 equal columns
Â Â Â Â gridTemplateRows: "repeat(3, 100px)", // 3 equal rows
Â Â Â Â gap: "10px",
Â Â Â Â justifyContent: "center",
Â Â Â Â alignItems: "center",
Â Â Â Â marginBottom: "20px",
Â Â },
Â Â cell: {
Â Â Â Â width: "100px",
Â Â Â Â height: "100px",
Â Â Â Â backgroundColor: "#f7fafc",
Â Â Â Â border: "2px solid #627d98",
Â Â Â Â borderRadius: "8px",
Â Â Â Â display: "flex",
Â Â Â Â justifyContent: "center",
Â Â Â Â alignItems: "center",
Â Â Â Â fontSize: "2rem",
Â Â Â Â fontWeight: "bold",
Â Â Â Â color: "#102a43",
Â Â Â Â cursor: "pointer",
Â Â Â Â boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)",
Â Â },
Â Â button: {
Â Â Â Â padding: "10px 20px",
Â Â Â Â fontSize: "1rem",
Â Â Â Â backgroundColor: "#627d98",
Â Â Â Â color: "#fff",
Â Â Â Â border: "none",
Â Â Â Â borderRadius: "5px",
Â Â Â Â cursor: "pointer",
Â Â Â Â boxShadow: "0 2px 4px rgba(0, 0, 0, 0.2)",
Â Â Â Â transition: "background 0.3s ease-in-out",
Â Â },
};

export default GameBoard;
